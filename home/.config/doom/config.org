#+TITLE: Doom Emacs Configuration

* Getting Started
This document is used to generate the configuration file for [[https://github.com/hlissner/doom-emacs][Doom Emacs]]. Don't
forget to run ~doom sync~ to generate the configuration file when you fetch
the lastest version of this file using git. It might be worthwhile to put it in
=$DOTFILES_DIR/setup.sh=, but I don't have any plans to do so any time soon
because I don't have Emacs installed on all of my computers.

If you want fancy stuff like code completion or symbol lookups when editing code
blocks in this document, you can use [[help:org-edit-special][org-edit-special]] (bound to =C-c '=) on the
desired code block to achieve this. Additionally, you can use [[help:apropos][apropos]] (bound to
=SPC h a=) or the likes to lookup a lisp symbol under the cursor without having
to open a special buffer.
* UI Settings
** Theme
Use the [[https://github.com/morhetz/gruvbox][gruvbox]] theme as usual. Additionally, get rid of the banner.

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-gruvbox)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-banner)
#+END_SRC
** Fonts
Monospace is the least common denominator font in the desktop Linux world. Since
the fonts available varies per-computer, you should change it in a local git
branch if you're unhappy with it. I assume that most distros use DejaVu Sans or
similar as the default Monospace font, so it shouldn't be a problem most of the
time. If you have Fira Code installed, there's a patch that you could use in
=$DOTFILES_DIR/patches/font-fira-code.patch=.

The font size is purposefully unspecified, because GTK Emacs currently lacks
HiDPI autoscaling support. Since the preferrable font size varies greatly from
one display to another, this should also be specified in a local git branch.
Somewhat fortunately, Emacs does seem to automatically pick a decent font size
if you don't specify it in the settings, but I find it a little too large for my
likings.

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "monospace"))
#+END_SRC
** Frame
Frame is the term Emacs uses to refer to GUI windows.
*** Title
Use the buffer name as the title.

#+BEGIN_SRC emacs-lisp
(setq frame-title-format '("%b")
      icon-title-format frame-title-format)
#+END_SRC
*** Size
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(width . 132))
(add-to-list 'default-frame-alist '(height . 46))
#+END_SRC
** Informational Stuff
Display line numbers.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC

I'd like [[https://github.com/justbur/emacs-which-key][which-key]] to show up instantly, but setting ~which-key-idle-delay~ to
~0~ is [[https://github.com/justbur/emacs-which-key/issues/134][known to cause problems]]. So set it to a value that's close enough to zero
instead.

#+BEGIN_SRC emacs-lisp
(setq which-key-idle-delay 0.01)
#+END_SRC

Highlight the target region for evil edit operations for a full second. Having a
clear visual feedback is especially important when yanking text because evil
motions and text objects can behave very differently depending on which emacs
modes are enabled. The default duration is too short to make sure that I'm
operating on the right region.

#+BEGIN_SRC emacs-lisp
(setq evil-goggles-duration 1
      evil-goggles-pulse t)
#+END_SRC
* Editing
** Indentation
Unfortunately, configuring indentation in Emacs is not as straightforward as
Vim. Ideally, I would use the following for the global defaults and make some
adjustments per filetype because that's what I've used for my existing files.

| config         | value |
|----------------+-------|
| hard tab width |     8 |
| soft tab width |     2 |
| indent type    | space |

A bit of research shows that Emacs do have settings shown below that's supposed
to make this possible:

| config             | vim equivalent |
|--------------------+----------------|
| ~tab-width~        | ~tabstop~      |
| ~tab-stop-list~    | ~softtabstop~  |
| ~standard-indent~  | ~shiftwidth~   |
| ~indent-tabs-mode~ | ~expandtab~    |

However, this doesn't really seem to work in practice because of two reasons:

- each major mode has its own way of configuring indentation
- doom relies heavily on ~tab-width~ to configure indentation

So as a compromise, I'll settle with the following for Emacs:

| config         | value |
|----------------+-------|
| hard tab width |     2 |
| soft tab width |     2 |
| indent type    | space |

Indent settings for more filetypes would be added as necessary.

#+BEGIN_SRC emacs-lisp
(setq standard-indent 2
      js-indent-level standard-indent
      ledger-post-account-alignment-column standard-indent
      ledger-post-amount-alignment-column 0
      sh-basic-offset standard-indent)
(setq-default indent-tabs-mode nil
              tab-width standard-indent)
#+END_SRC
** Cutting and Pasting
Emacs by default syncs with the system clipboard when cutting or pasting text.
This can be really annoying if you do things like paste from the clipboard after
a =c w= in normal mode, because the clipboard will be overwritten before you can
paste its contents. The following line should disable this behavior:

#+BEGIN_SRC emacs-lisp
(setq select-enable-clipboard nil)
#+END_SRC

Doom uses [[https://github.com/spudlyo/clipetty][clipetty]] so that it can use OSC 52 to sync with the clipboard on TTY
Emacs. But the thing is, stock Emacs already does this with [[https://github.com/emacs-mirror/emacs/blob/master/lisp/term/xterm.el][xterm.el]] and its
derivatives, [[https://github.com/emacs-mirror/emacs/blob/master/lisp/term/screen.el][screen.el]] and [[https://github.com/emacs-mirror/emacs/blob/master/lisp/term/tmux.el][tmux.el]]. It's just that you'll likely have to enable
clipboard syncing manually through [[help:xterm-extra-capabilities][xterm-extra-capabilities]] and friends because
terminal feature detection is so unreliable. What clipetty does differently from
stock Emacs is that it forgoes any sort of feature detection and unconditionally
emits OSC 52, potentially causing problems for terminals that doesn't support
it. But the most problematic aspect of clipetty is that it ignores the value of
=select-enable-clipboard=, which I configured above, and hooks into every cut
operation. This is a real deal breaker for me, so I'll disable it with the
following line:

#+BEGIN_SRC emacs-lisp
(remove-hook 'tty-setup-hook 'doom-init-clipboard-in-tty-emacs-h)
#+END_SRC

I'll end this section by setting up keybindings for copying and pasting using
the system clipboard. This might better belong in the keybindings section, but
I'll leave it here for now.

#+BEGIN_SRC emacs-lisp
(defun rc-clipboard-yank ()
  "Copies the active region to the system clipboard."
  (interactive)
  (when (region-active-p)
    (gui-set-selection 'CLIPBOARD
                       (buffer-substring (region-beginning) (region-end)))))

(defun rc-clipboard-paste ()
  "Pastes text from the system clipboard."
  (interactive)
  (let ((text (gui-get-selection 'CLIPBOARD)))
    (when text (insert-for-yank text))))

(map! :v "s-c" #'rc-clipboard-yank
      :nvi "s-v" #'rc-clipboard-paste)
(define-key! :keymaps '(evil-ex-completion-map) "s-v" #'rc-clipboard-paste)
(define-key! :keymaps +default-minibuffer-maps "s-v" #'rc-clipboard-paste)
#+END_SRC
* Major Modes
** Filetype Detection
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.ldg\\'" . ledger-mode))
#+END_SRC
** Calendar
Localize holidays for Japan

#+BEGIN_SRC emacs-lisp
(use-package! japanese-holidays
  :after holidays
  :config
  (setq calendar-holidays (append japanese-holidays
                                  holiday-local-holidays
                                  holiday-other-holidays)))
#+END_SRC
** Magit
Tell Magit where to look for repositories. Since I use a =domain/user/project=
layout for organizing my repositories, the max depth should be set to 3.

#+BEGIN_SRC emacs-lisp
(setq magit-repository-directories
      '(("~/Documents/src/repos" . 3) ("~/Documents/src/go/src" . 3)))
#+END_SRC
** Org Mode
Set default location for placing org files

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Documents/org/"
      org-archive-location (concat org-directory ".archive/%s::")
      org-roam-directory (concat org-directory "notes/"))
#+END_SRC

Enable org-habit

#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-modules 'org-habit t))
#+END_SRC

Set the initial fold level. Only the headlines should be visible.

#+BEGIN_SRC emacs-lisp
(setq org-startup-folded 'content)
#+END_SRC

Show inline images by default

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC
