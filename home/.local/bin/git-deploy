#!/usr/bin/env bash

ENABLE_DRYRUN=
ENABLE_PREFIX=1

main() {
  local gitref=HEAD

  for n in "$@"; do
    case "$n" in
      -n|--dry-run) ENABLE_DRYRUN=1; shift ;;
      -b) gitref="$2"; shift; shift ;;
      -r) ENABLE_PREFIX=; shift ;;
      -h|--help) usage ;;
      *) break ;;
    esac
  done

  (( $# < 2 )) && usage

  local remote_name="$1"
  local remote_url="$2"

  local repo_root="$(git config --get ghq.root)"
  local repo_root="${repo_root/#\~/$HOME}"
  local local_path="$(git rev-parse --show-toplevel)"

  if [[ -n "$ENABLE_PREFIX" ]]; then
    if [[ "$remote_url" =~ :$ ]]; then
      local remote_host="${remote_url%:}"
      local remote_path="${local_path#$repo_root/}"
    elif [[ "$remote_url" =~ : ]]; then
      local remote_host="${remote_url%%:*}"
      local remote_prefix="${remote_url#*:}"
      local remote_path="${local_path/#$repo_root/$remote_prefix}"
    else
      local remote_host="$remote_url"
      local remote_path="${local_path#$repo_root/}"
    fi
  else
    if [[ "$remote_url" =~ : ]]; then
      local remote_host="${remote_url%%:*}"
      local remote_path="${remote_url#*:}"
    else
      local remote_host="$remote_url"
      local remote_path=
    fi
  fi

  echo "[WARNING] Don't use this for production, as you'll risk exposing your .git directory"

  run ssh "$remote_host" git init "${remote_path:-.}"
  run ssh "$remote_host" git -C "$remote_path" config receive.denyCurrentBranch updateInstead
  run git remote add "$remote_name" "$remote_host:$remote_path"
  run git config "remote.$remote_name.push" "+$gitref:master"
}

usage() {
cat <<EOF
usage: $0 [options] [name] [host[:path]]

options:
  -h, --help		Show usage and exit
  -n, --dry-run		Don't acutally make any changes
  -b <branchname>	Branch used for pushing (default: current branch)
  -r			Use the given path as-is
EOF

exit 1
}

run() {
  echo "$(tput bold)>$(tput sgr0) $*"
  if [[ -z "$ENABLE_DRYRUN" ]]; then
    "$@"
  fi
}

main "$@"
