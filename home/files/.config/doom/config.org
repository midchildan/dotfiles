#+TITLE: Doom Emacs Configuration

* Getting Started
This document is used to generate the configuration file for [[https://github.com/hlissner/doom-emacs][Doom Emacs]]. The
configuration would be generated by running ~doom sync~, so do remember to run
it after making any changes to this document, either by a direct edit or a ~git
pull~.

While editing this document, it may be nice to have code completion for Emacs
Lisp code blocks. This is possible by putting the cursor on the desired code
block and running [[help:org-edit-special][org-edit-special]] (bound to =C-c '=), which opens a special
buffer for editing that code block. Another immensely useful feature is
[[help:+lookup/documentation][+lookup/documentation]] (bound to =K=) which, as the name implies, shows the
documentation for the symbol under the cursor.

Finally, let's conclude this section with a header to put in the first line of
the generated configuration file. This follows [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#use-lexical-binding-everywhere][recommended practice]] from the
[[doom-docs:faq.org][Doom FAQ]].

#+begin_src emacs-lisp
;;; ~/.config/doom/config.el -*- lexical-binding: t; -*-
#+end_src

* UI Settings
** Theme
Use [[https://github.com/morhetz/gruvbox][gruvbox]]. Also remove the splash screen banner for a nice and clean look.

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-gruvbox)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-banner)
#+END_SRC

** Fonts
Use [[https://github.com/tonsky/FiraCode][Fira Code]]. Fira Code would be installed by Home Manager if the option
=dotfiles.profiles.fonts.enable= is set to =true=.

The font size is purposefully unspecified, because GTK Emacs currently lacks
HiDPI autoscaling support. Since the preferrable font size varies greatly from
one display to another, this should also be specified in a local git branch.
Somewhat fortunately, Emacs does seem to automatically pick a decent font size
if it isn't specified in the settings, but I find it a little too large for my
liking.

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Fira Code"))
#+END_SRC

For Japanese text, use IPA Gothic. It's assumed to be installed system-wide
and therefore not present in the Home Manager configuration.

#+begin_src emacs-lisp
(defvar rc-japanese-font (font-spec :family "IPA Gothic")
  "The default font to use for Japanese text.")

(add-hook! 'doom-load-theme-hook :append
  (defun rc-set-japanese-font ()
    (dolist (charset '(kana han cjk-misc))
      (set-fontset-font t charset rc-japanese-font))))
#+end_src

Finally, adjust the width for Japanese fonts so that it would align well with
English text. This is especially important for org-mode tables, because the
table columns wouldn't align otherwise with mixed English and Japanese text.
There are two possible solutions for this in Emacs:

- Choose a font pair that aligns well
  + pros :: /could/ provide the best aesthetics
  + cons :: very few choices available
- Rescale the Japanese font
  + pros :: works for any font
  + cons :: the height would differ between English and Japanese text

Here, the second approach would have to be taken because my chosen font pair
won't align well by itself.

The alignment problem occurs because letters from popular English programming
fonts typically have an aspect ratio of 3:5 while most Japanese fixed-width
fonts have 1:2 ratio for English letters. Therefore, rescaling Japanese fonts
by a factor of 1.2 should do the trick most of the time.

The following tells Emacs to scale [[https://en.wikipedia.org/wiki/East_Asian_Gothic_typeface][Gothic fonts]] by a factor of 1.2. It matches
any font that has "Gothic" in its name.

#+begin_src emacs-lisp
(add-to-list 'face-font-rescale-alist '("Gothic" . 1.2))
#+end_src

** Lines
Display line numbers, but hide it when writeroom mode is enabled.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)

(add-hook! 'writeroom-mode-hook
  (defun rc-disable-linum-in-writeroom-mode ()
    (if writeroom-mode
        (display-line-numbers-mode -1)
      (display-line-numbers-mode))))
#+END_SRC

Make long lines wrap instead of truncating it, to remove the need to constantly
scroll sideways. In doing so, wrap at window width instead of at the word
boundary. I find "smart" line wrapping more confusing than helpful because it
shows a different representation of the actual file.

#+begin_src emacs-lisp
(setq-default truncate-lines nil
              word-wrap nil)
#+end_src

Disable the fill column indicator when ~mixed-pitch-mode~ is enabled because
it's not as useful with proportionate fonts.

#+begin_src emacs-lisp
(add-hook! 'mixed-pitch-mode-hook
  (defun rc-disable-fci-in-mixed-pitch-mode ()
    (if mixed-pitch-mode
        (+fill-column-enable-h -1)
      (+fill-column-enable-h))))
#+end_src

** Frame
Frame is the term Emacs uses to refer to GUI windows.

*** Title
Use the buffer name as the title.

#+BEGIN_SRC emacs-lisp
(setq frame-title-format '("%b")
      icon-title-format frame-title-format)
#+END_SRC

*** Size
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(width . 132))
(add-to-list 'default-frame-alist '(height . 46))
#+END_SRC

** Informational Stuff
I'd like [[https://github.com/justbur/emacs-which-key][which-key]] to show up instantly, but setting ~which-key-idle-delay~ to
~0~ is [[https://github.com/justbur/emacs-which-key/issues/134][known to cause problems]]. So set it to a value that's close enough to zero
instead.

#+BEGIN_SRC emacs-lisp
(setq which-key-idle-delay 0.01)
#+END_SRC

Highlight the target region for evil edit operations for a full second. Having a
clear visual feedback is especially important when yanking text because evil
motions and text objects can behave very differently depending on which emacs
modes are enabled. The default duration is too short to make sure that I'm
operating on the right region.

#+BEGIN_SRC emacs-lisp
(setq evil-goggles-duration 1
      evil-goggles-pulse t)
#+END_SRC

** Ivy
[[https://github.com/abo-abo/swiper][Ivy]] is a fuzzy finder for Emacs used throughout the Doom UI.

Let's start by configuring Ivy's matching algorithm. ~ivy--regex-plus~ will
replace spaces with the regex ~.*~.

#+BEGIN_SRC emacs-lisp
(setq ivy-re-builders-alist '((t . ivy--regex-plus)))
#+END_SRC

Next, specify the UI for showing actions to be performed on an Ivy selection. At
the time of writing, the default UI wouldn't show all available actions, so just
change it to something that does:

#+BEGIN_SRC emacs-lisp
(setq ivy-read-action-function #'ivy-hydra-read-action)
#+END_SRC

* Editing
** Indentation
Unfortunately, configuring indentation in Emacs is not as straightforward as
Vim. Ideally, I would use the following for the global defaults and make some
adjustments per filetype because that's what I've used for my existing files.

| config         | value |
|----------------+-------|
| hard tab width |     8 |
| soft tab width |     2 |
| indent type    | space |

A bit of research shows that Emacs do have settings shown below that's supposed
to make this possible:

| config             | vim equivalent |
|--------------------+----------------|
| ~tab-width~        | ~tabstop~      |
| ~tab-stop-list~    | ~softtabstop~  |
| ~standard-indent~  | ~shiftwidth~   |
| ~indent-tabs-mode~ | ~expandtab~    |

However, this doesn't really seem to work in practice because of two reasons:

- each major mode has its own way of configuring indentation
- doom relies heavily on ~tab-width~ to configure indentation

So as a compromise, I'll settle with the following for Emacs:

| config         | value |
|----------------+-------|
| hard tab width |     2 |
| soft tab width |     2 |
| indent type    | space |

Indent settings for more filetypes would be added as necessary.

#+BEGIN_SRC emacs-lisp
(setq standard-indent 2
      js-indent-level standard-indent
      ledger-post-account-alignment-column standard-indent
      ledger-post-amount-alignment-column 0
      sh-basic-offset standard-indent)
(setq-default indent-tabs-mode nil
              tab-width standard-indent)
#+END_SRC

** Cutting and Pasting
Emacs by default syncs with the system clipboard when cutting or pasting text.
This can be really annoying if you do things like paste from the clipboard after
a =c w= in normal mode, because the clipboard will be overwritten before you can
paste its contents. The following line should disable this behavior:

#+BEGIN_SRC emacs-lisp
(setq select-enable-clipboard nil)
#+END_SRC

I'll end this section by setting up keybindings for copying and pasting using
the system clipboard. This might better belong in the keybindings section, but
I'll leave it here for now.

#+BEGIN_SRC emacs-lisp
(defun rc-clipboard-yank ()
  "Copies the active region to the system clipboard."
  (interactive)
  (when (region-active-p)
    (gui-set-selection 'CLIPBOARD
                       (buffer-substring (region-beginning) (region-end)))))

(defun rc-clipboard-paste ()
  "Pastes text from the system clipboard."
  (interactive)
  (let ((text (gui-get-selection 'CLIPBOARD)))
    (when text (insert-for-yank text))))

(map! :v "s-c" #'rc-clipboard-yank
      :nvi "s-v" #'rc-clipboard-paste)
(define-key! :keymaps '(evil-ex-completion-map) "s-v" #'rc-clipboard-paste)
(define-key! :keymaps +default-minibuffer-maps "s-v" #'rc-clipboard-paste)
#+END_SRC

** Undo
Emacs has an unconventional undo system that is notoriously difficult to
work with. Fortunately, Doom Emacs provides a more intuitive undo system
through the undo-fu package. However, undo-fu can still revert to native
Emacs behavior if you press =C-g= (or =Esc= with evil-mode) before undoing.
The following saves a lot of frustration by disabling this behavior:

#+begin_src emacs-lisp
(setq undo-fu-ignore-keyboard-quit t)
#+end_src

* Major Modes
** Filetype Detection
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.ldg\\'" . ledger-mode))
#+END_SRC

** Calendar
Localize holidays for Japan

#+BEGIN_SRC emacs-lisp
(use-package! japanese-holidays
  :after holidays
  :config
  (setq calendar-holidays (append japanese-holidays
                                  holiday-local-holidays
                                  holiday-other-holidays)))
#+END_SRC

** Magit
Tell Magit where to look for repositories. Since I use a =domain/user/project=
layout for organizing my repositories, the max depth should be set to 3. Also
inform projectile about it.

#+BEGIN_SRC emacs-lisp
(setq magit-repository-directories
        '(("~/Documents/src/repos" . 3) ("~/Documents/src/go/src" . 3))
      projectile-project-search-path
        (mapcar #'car magit-repository-directories))
#+END_SRC

Add a command in the "push" menu to push to a remote without an explicit
refspec. This is useful if you want to use a refspec that you've specified in
your gitconfig.

#+BEGIN_SRC emacs-lisp
(after! magit
  (transient-append-suffix 'magit-push "r"
    '("R" "implicit refspecs" magit-push-to-remote)))
#+END_SRC

Add a keybinding to browse files in other git projects. It works similarly to
=SPC p p= (bound to [[elisp:(projectile-switch-project)][projectile-switch-project]]), but it can find projects not
visited before. It looks for git projects in ~magit-repository-directories~.

#+BEGIN_SRC emacs-lisp
(defun rc-browse-in-git-repo ()
  (interactive)
  (doom/find-file-in-other-project (magit-read-repository)))

(map! :after magit
      :leader
      :prefix "g"
      :desc "Browse other git projects" "p" #'rc-browse-in-git-repo)
#+END_SRC

** Org Mode
Set default location for placing org files

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Documents/org/"
      org-archive-location (concat org-directory ".archive/%s::")
      org-roam-db-location (concat doom-cache-dir "org-roam.db")
      org-roam-directory (concat org-directory "notes/"))
#+END_SRC

Set the initial fold level. Fold everyting except the current subtree.

#+BEGIN_SRC emacs-lisp
(setq org-startup-folded 'content)
#+END_SRC

Show inline images by default

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
#+END_SRC

~org-cycle-emulate-tab~ makes the =TAB= key behave like it does in insert
mode when the cursor isn't placed at a headline. The following disables this
behavior because it makes no sense under Vim emulation.

#+begin_src emacs-lisp
(setq org-cycle-emulate-tab nil)
#+end_src

Enable org-habit

#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-modules 'org-habit t))
#+END_SRC

Doom changes the behavior of the =TAB= key to only change the visilbility of
the current subtree instead of cycling through it recursively. The following
restores =TAB= cycling because I find the original behavior more convenient.
For non-cycling =TAB=, there's =z a= instead.

#+begin_src emacs-lisp
(after! evil-org
  (remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h))
#+end_src

** Ruby
Prevent ruby-mode from forcibly inserting content on save.

#+begin_src emacs-lisp
(setq ruby-insert-encoding-magic-comment nil)
#+end_src

** Nix
Use nixpkgs-fmt for formatting.

#+begin_src emacs-lisp
(setq nix-nixfmt-bin "nixpkgs-fmt")
#+end_src

* Packages
** Default Init File
Load the default init file. This is the place where distro packagers can place
their own configuration. Doom disables it as an optimization, but it's useful
for storing information that can only reliably be obtained through package
managers. More specifically, it's used in this dotfiles to specify the full path
to some commands used by Doom. Doing so removes the need to clutter =PATH= with
commands not needed outside of Doom.

#+begin_src emacs-lisp
(load "default" 'noerror 'nomessage)
#+end_src

** Flycheck
Disable Chef Foodcritic, which is deprecated.

#+begin_src emacs-lisp
(setq-default flycheck-disabled-checkers '(chef-foodcritic))
#+end_src

** RSS
Load RSS feeds from an OPML file to make it possible to share feeds across
different RSS readers.

#+begin_src emacs-lisp
(let ((feedpath "~/Documents/feeds.opml"))
  (when (file-exists-p feedpath)
    (elfeed-load-opml feedpath)))
#+end_src

** Yankpad
[[https://github.com/Kungsgeten/yankpad][Yankpad]] is a plugin for managing snippets. The snippets are managed in
org mode format in a file path configured by ~yankpad-file~. The snippets
can be organized by filetype, project, or an user-defined category.

How does this differ from typical snippet plugins like yasnippet? Typical
snippet plugins are useful for snippets that are general purpose and
frequently used. They're best suited for quickly inserting commonly used
programming language constructs. On the other hand, Yankpad is better suited
for snippets that are more specialized which ends up being copy-pasted from
other files. It puts more emphasis on organization and management.

First, enable the plugin.

#+begin_src emacs-lisp
(use-package! yankpad :defer-incrementally t)
#+end_src

Next, add some keybindings. One is for inserting the snippets, and the other
is for switching between different categories of snippets.

#+begin_src emacs-lisp
(map! :after yankpad
      :leader
      (:prefix "i"
       :desc "Yankpad snippet" "S" #'yankpad-insert)
      (:prefix "t"
       :desc "Yankpad category" "s" #'yankpad-set-category))
#+end_src

* Workarounds
** TODO Fix for org inline images breaking org-babel
Issue in [[https://github.com/hlissner/doom-emacs/issues/3185][hlissner/doom-emacs#3185]]

#+BEGIN_SRC emacs-lisp
(defadvice! rc-fix/+org-inline-image-data-fn (_protocol link _description)
  :override #'+org-inline-image-data-fn
  "Interpret LINK as base64-encoded image data. Ignore all errors."
  (with-demoted-errors "%S" (base64-decode-string link)))
#+END_SRC

** TODO Fix for void-function errors when using pdf-tools from Nix
#+begin_src emacs-lisp
(defadvice! rc-fix/pdf-tools-install-noverify ()
  :before #'pdf-tools-install-noverify
  (load "pdf-tools-autoloads" nil t))
#+end_src
