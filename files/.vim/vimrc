"{{{ Preamble

silent! packadd! cfilter
packadd! matchit
runtime ftplugin/man.vim

augroup vimrc
  autocmd!
augroup END

"}}}
"{{{ Editing

set encoding=utf-8
set fileencodings=ucs-bom,utf-8,iso-2022-jp,euc-jp,cp932,default,latin1
set fileformats=unix,dos,mac
set backspace=indent,eol,start
set expandtab
set smarttab
set shiftwidth=2
set softtabstop=2
set autoindent
set copyindent
set preserveindent
set formatoptions+=jmB
set omnifunc=syntaxcomplete#Complete
filetype plugin indent on

" jump to the last known cursor position
au vimrc BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
  \ |   exe "normal! g`\""
  \ | endif

" enable bracketed paste mode
if has('patch-8.0.0238') && $TERM =~? 'screen'
  let &t_BE = "\<Esc>[?2004h"
  let &t_BD = "\<Esc>[?2004l"
  exec "set t_PS=\<ESC>[200~ | set t_PE=\<ESC>[201~"
endif

"}}}
"{{{ UI

set hidden
set cursorline
set colorcolumn=81
set number
set ruler
set showcmd
set shortmess+=c
set listchars=tab:>\ ,trail:-,nbsp:+
set cmdheight=1
set laststatus=2
set display=lastline
set lazyredraw
set showmatch
set wildmenu
set wildignorecase
set nofoldenable
set title
set mouse=a
set diffopt=internal,filler,closeoff,algorithm:histogram,indent-heuristic

set background=dark
colorscheme retrobox

syntax enable

" cursor shape
if !has('nvim') && $TERM =~? '\(xterm\|screen\)'
  let &t_SI = "\<Esc>[6 q"
  let &t_SR = "\<Esc>[4 q"
  let &t_EI = "\<Esc>[2 q"
endif

" show whitespace errors
hi link WhitespaceError Error
au vimrc Syntax * syn match WhitespaceError /\s\+$\| \+\ze\t/

" adjust quickfix window position
au vimrc QuickfixCmdPost \C[^lA-Z]* botright cwindow
au vimrc QuickfixCmdPost l* botright lwindow

"}}}
"{{{ Search

set incsearch
set hlsearch
set ignorecase
set smartcase
set wrapscan
set tags=./tags;,tags
if executable('rg')
  set grepprg=rg\ --vimgrep\ --hidden
endif

"}}}
"{{{ Persistent Data

set viminfo+=n~/.local/state/vim/viminfo
set undodir=~/.local/state/vim/undo
set dir=~/.local/state/vim/swap//
set backup
set backupdir=~/.local/state/vim/backup
set undofile
for s:d in [&dir, &backupdir, &undodir]
  if !isdirectory(s:d)
    call mkdir(iconv(s:d, &encoding, &termencoding), 'p')
  endif
endfor

"}}}
"{{{ Keybindings

let mapleader="\<Space>"
let maplocalleader="\<CR>"
" NOTE: Workaround for <Nop> bug in vim/vim#1548, neovim/neovim#6241
nnoremap <Space> \
xnoremap <Space> \

" make Y consistent with C and D
nnoremap Y y$
" make & preserve flags and create a visual mode equivalent
nnoremap & :<C-u>&&<CR>
xnoremap & :<C-u>&&<CR>
" make ctrl-l also clear highlights and update diffs
nnoremap <C-l> :<C-u>nohlsearch<Bar>diffupdate<Bar>normal! <C-l><CR>
" break undo before deleting words or whole lines
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

" switch to the next modified buffer
nnoremap <silent> <Leader>b :bmodified<CR>

" find merge conflict marker
nnoremap <silent> <Leader>fc /\v^[<=>]{7}( .*<Bar>$)<CR>
xnoremap <silent> <Leader>fc /\v^[<=>]{7}( .*<Bar>$)<CR>
onoremap <silent> <Leader>fc /\v^[<=>]{7}( .*<Bar>$)<CR>
" find whitespace errors
nnoremap <silent> <Leader>f<Space> /\s\+$\<Bar> \+\ze\t<CR>
xnoremap <silent> <Leader>f<Space> /\s\+$\<Bar> \+\ze\t<CR>
onoremap <silent> <Leader>f<Space> /\s\+$\<Bar> \+\ze\t<CR>
" find full-width punctuation marks
nnoremap <silent> <Leader>f. /\v(\.<Bar>．<Bar>。)<CR>
xnoremap <silent> <Leader>f. /\v(\.<Bar>．<Bar>。)<CR>
onoremap <silent> <Leader>f. /\v(\.<Bar>．<Bar>。)<CR>
nnoremap <silent> <Leader>f, /\v(,<Bar>，<Bar>、)<CR>
xnoremap <silent> <Leader>f, /\v(,<Bar>，<Bar>、)<CR>
onoremap <silent> <Leader>f, /\v(,<Bar>，<Bar>、)<CR>
nnoremap <silent> <Leader>f! /\v(!<Bar>！)<CR>
xnoremap <silent> <Leader>f! /\v(!<Bar>！)<CR>
onoremap <silent> <Leader>f! /\v(!<Bar>！)<CR>
nnoremap <silent> <Leader>f? /\v(\?<Bar>？)<CR>
xnoremap <silent> <Leader>f? /\v(\?<Bar>？)<CR>
onoremap <silent> <Leader>f? /\v(\?<Bar>？)<CR>

" text objects
xnoremap <silent> al <Esc>0v$
onoremap <silent> al :<C-u>normal! 0v$<CR>
xnoremap <silent> il <Esc>^vg_
onoremap <silent> il :<C-u>normal! ^vg_<CR>
xnoremap <silent> ag gg0oG$
onoremap <silent> ag :<C-u>exe "normal! m`"<Bar>keepjumps normal! ggVG<CR>

" toggles
nnoremap <silent> <Leader>ts :setlocal spell! spell?<CR>
nnoremap <silent> <Leader>tv :call vimrc#toggle_virtualedit()<CR>
nnoremap <silent> <Leader>tq :call vimrc#toggle_textwidth()<CR>
nnoremap <silent> <Leader>t# :setlocal relativenumber! relativenumber?<CR>
nnoremap <silent> <Leader>t~ :set ignorecase! ignorecase?<CR>
nnoremap <silent> <Leader>t<Tab> :call vimrc#toggle_whitespace_visibility()<CR>

" 3-way merge
nnoremap <silent> <Leader>1 :diffget LOCAL<CR>
nnoremap <silent> <Leader>2 :diffget BASE<CR>
nnoremap <silent> <Leader>3 :diffget REMOTE<CR>

"}}}
"{{{ Misc

let g:tex_flavor = 'latex'

" See :h :DiffOrig
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
  \ | wincmd p | diffthis

"}}}
" vim:set foldmethod=marker:
