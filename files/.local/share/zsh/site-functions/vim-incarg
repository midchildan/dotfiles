emulate -L zsh

setopt localoptions extended_glob
local match mbegin mend MATCH MBEGIN MEND i

# find the number and determine the base
integer pos=$(( CURSOR + 1 )) base=0

# avoid miscalculating positions when cursor is at the end of the line
while (( pos > 0 )) && [[ "$BUFFER[pos]" == '' ]]; do
  (( pos-- ))
done

# check for a prefix (e.g., 0x) before the cursor
for (( i = 0; i < 2; i++ )); do
  case "$BUFFER[1,pos]" in
    *0[xX][0-9a-fA-F]##) base=16 ;;
    *0[oO][0-7]##) base=8 ;;
    *0[bB][01]##) base=2 ;;
    *[1-9]) base=10 ;;
    *0) ;; # there may be a prefix right after the cursor
    *)
      # the non-Vim variant looks right before the cursor too, but not after it
      if [[ "$WIDGET" != vi* ]]; then
        if (( i == 0 )); then
          (( pos-- ))
          continue
        else
          return 1
        fi
      fi
      ;;
  esac

  break
done

# check for a prefix on the cursor
if (( base == 0 && pos < $#BUFFER )); then
  case "$BUFFER[1,pos+1]" in
    *0[xX][0-9a-fA-F]) base=16; (( pos++ )) ;;
    *0[oO][0-7]) base=8; (( pos++ )) ;;
    *0[bB][01]) base=2; (( pos++ )) ;;
  esac
fi

if (( base == 0 )); then
  if [[ "$WIDGET" == vi* ]]; then
    # jump to the nearest number after the cursor
    while [[ "$BUFFER[pos]" == [^0-9] ]]; do
      (( pos++ ))
      (( pos > $#BUFFER )) && return 1
    done
  fi

  # check for a prefix right after the cursor and jump right after it, if any
  if (( pos <= 1 )) || [[ "$BUFFER[pos-1]" == [^0-9] ]]; then
    case "$BUFFER[pos,-1]" in
      0[xX][0-9a-fA-F]*) base=16; (( pos += 2 )) ;;
      0[oO][0-7]*) base=8; (( pos += 2 )) ;;
      0[bB][01]*) base=2; (( pos += 2 )) ;;
    esac
  fi
fi

if (( base == 0 )); then
  base=10
fi

# find the start of the number
integer first="$pos"
case "$base" in
  10)
    while [[ "$BUFFER[first-1]" == [0-9] ]]; do
      (( first-- ))
    done
    if [[ $BUFFER[first-1] = - ]]; then
      (( first-- ))
    fi
    ;;
  2)
    while [[ "$BUFFER[first-1]" == [01] ]]; do
      (( first-- ))
    done
    ;;
  8)
    while [[ "$BUFFER[first-1]" == [0-7] ]]; do
      (( first-- ))
    done
    ;;
  16)
    while [[ "$BUFFER[first-1]" == [0-9a-fA-F] ]]; do
      (( first-- ))
    done
    ;;
esac

# find the end of the number
integer last="$pos"
case "$base" in
  10)
    while [[ "$BUFFER[last+1]" == [0-9] ]]; do
      (( last++ ))
    done
    ;;
  2)
    while [[ "$BUFFER[last+1]" == [01] ]]; do
      (( last++ ))
    done
    ;;
  8)
    while [[ "$BUFFER[last+1]" == [0-7] ]]; do
      (( last++ ))
    done
    ;;
  16)
    while [[ "$BUFFER[last+1]" == [0-9a-fA-F] ]]; do
      (( last++ ))
    done
    ;;
esac

# calculate the number of digits
integer ndigits=0
case "$BUFFER[first,first+1]" in
  0*|-0) ndigits=$(( last - first + 1 )) ;;
esac

# determine the amount to increment
integer delta=${NUMERIC:-1}
if [[ "$WIDGET" = *decarg ]]; then
  (( delta = -delta ))
fi
if [[ "$WIDGET" = *sync-* ]]; then
  integer pane_index=1
  if [[ -n "$TMUX_PANE" ]]; then
    pane_index="$(tmux display-message -pt "$TMUX_PANE" '#{pane_index}')"
  elif [[ "$ITERM_SESSION_ID" =~ '^w[0-9]+t[0-9]+p([0-9]+)' ]]; then
    pane_index="$match[1]"
  fi
  (( delta *= pane_index ))
fi

local old="$BUFFER[first,last]"
integer oldlen=$#BUFFER

local fmt1 fmt2
case "$base" in
  10) fmt1=d; fmt2='#10' ;;
  2) fmt1=s; fmt2='##2' ;;
  8) fmt1=s; fmt2='##8' ;;
  16) fmt1="$BUFFER[first-1]"; fmt2='#16' ;;
esac

local raw_result new
raw_result="$( \
  printf "%0$ndigits$fmt1" $(( [$fmt2] "$base#$old" + delta )) 2> /dev/null)"
new="${raw_result// /0}"

if zstyle -t ":zle:$WIDGET" debug; then
  zle -M "[$WIDGET] base: $base delta: $delta old: '$old' new: '$new'"
fi

integer oldnum="$base#$old" newnum="$base#$new" 2> /dev/null
if (( delta > 0 && newnum < oldnum || delta < 0 && newnum > oldnum  )); then
  zle -M "[$WIDGET] The resulting number is either too big or too small."
  return 1
fi

BUFFER[first,last]="$new"

integer offset=0
if [[ "$WIDGET" == vi* ]]; then
  offset=-1
fi
(( CURSOR = last + $#BUFFER - oldlen + offset ))

return 0
