#!/usr/bin/env bash

IGNOREFILES=(
  README.md
  LICENSE
)

main() {
  local opt mode='ssh' src='gh-pages' dest='' dotrepo=''
  while getopts hs:d:g:cp opt; do
    case $opt in
      s) src="$OPTARG" ;;
      d) dest="$OPTARG" ;;
      g) dotrepo="$OPTARG" ;;
      c) mode="scp" ;;
      p) mode="print" ;;
      h|?) usage ;;
    esac
  done
  shift $((OPTIND - 1))

  local host
  host="$(gethost "$@")"
  if [[ -z "$dotrepo" ]]; then
    dotrepo="$(findrepo "${BASH_SOURCE[0]}")" \
      || abort "Failed to find dotfiles repo"
  fi

  git -C "$dotrepo" archive --format=tar.gz "$src" "${IGNOREFILES[@]/#/:!/}" | {
    case "$mode" in
      ssh|scp) send "$host:$dest" ;;
      print) printscript "${dest:-\$HOME}" ;;
    esac
  }

  # run ssh
  if [[ "$mode" == "ssh" ]]; then
    # copy terminfo files to the remote server when using kitty
    if [[ "$TERM" == "xterm-kitty" ]] && command -v kitty &> /dev/null; then
      exec kitty +kitten ssh "$@"
    else
      exec ssh "$@"
    fi
  fi
}

# print a copy-pastable, self-contained script for deploying dotfiles
printscript() {
  local dest="$1"
  printf 'base64 -d <<EOF | tar xzf - -C "%s"\n' "$dest"
  base64
  echo "EOF"
}

# deploy dotfiles to remote
send() {
  local remote_dst="$1"
  local host="${remote_dst%%:*}"
  local path="${remote_dst#*:}"

  if [[ -n "$path" ]]; then
    ssh "$host" mkdir -p "$path" < /dev/null \
      || abort "Failed to create remote directory"
    ssh "$host" tar xzf - -C "$path" \
      || abort "Failed to transfer dotfiles"
  else
    ssh "$host" tar xzf - \
      || abort "Failed to transfer dotfiles"
  fi
}

# extract ssh hostname from the cli arguments
gethost() {
  local n
  for n in "$@"; do
    [[ "$n" != -* ]] && echo "$n"
  done
}

# find the canonical path to the dotfiles repo using the path to this script
findrepo() {
  local scriptfile scriptdir dotrepo

  scriptfile="$(realpath "$1")"
  [[ -z "$scriptfile" ]] && return 1

  scriptdir="$(dirname "$scriptfile")"
  [[ -z "$scriptdir" ]] && return 1

  dotrepo="$(git -C "$scriptdir" rev-parse --show-toplevel)"
  [[ -z "$dotrepo" ]] && return 1

  echo "$dotrepo"
}

# print an error message and exit
abort() {
  local message=""
  [[ -n "$1" ]] && message="$1"
  printf "%s():%s [ABORT] %s\n" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "$message"
  exit 1
}

usage() {
cat <<EOF
Remote cd - seemlessly bring your dotfiles with you when you ssh

usage: $0 [options] [--] [ssh args]

options:
  -h		Show usage and exit
  -d DIR	Remote destination (default: "")
  -s TREEISH 	Tree-ish identifier from the dotfiles repo (default: "gh-pages")
  -g DIR	Path to the dotfiles repo (default: automatic)
  -c		Copy dotfiles to remote and exit
  -p		Print a self-contained script for deploying dotfiles and exit

arguments:
  ssh args	arguments to pass to ssh

examples:
  Send files from main:home before ssh-ing to example.com
  $ $0 -s main:home example.com

  Send files from gh-pages to /tmp/dotfiles before ssh-ing to example.com
  $ $0 -d /tmp/dotfiles example.com

caveats:
  This script invokes SSH twice; once for copying the dotfiles, and once more
  for opening an user-controlled session. Because of this, you may have to
  authenticate twice when using this script. Fortunately, you can avoid
  re-authentication by using SSH's 'ControlMaster' and 'ControlPersist'
  features.
EOF

exit 1
}

main "$@"
